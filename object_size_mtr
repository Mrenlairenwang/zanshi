# USAGE
# python object_size_mtr.py --image images/example_one.png --width 0.955
# python object_size_mtr.py --image images/example_two.png --width 0.955
# python object_size_mtr.py --image images/example_three.png --width 3.5

# 导入必要的包
from scipy.spatial import distance as dist
from imutils import perspective  # 定义imutils中的透视方法
from imutils import contours
import numpy as np
# import argparse
import imutils
import cv2

# 定义中点计算函数
def midpoint(ptA, ptB):
    return ((ptA[0] + ptB[0]) * 0.5, (ptA[1] + ptB[1]) * 0.5)

# 构造解析参数
# construct the argument parse and parse the arguments
# ap = argparse.ArgumentParser()
# ap.add_argument("-i", "--image", required=True, help="path to the input image")
# ap.add_argument("-w", "--width", type=float, required=True, help="width of the left-most object in the image (in inches)")
# args = vars(ap.parse_args())

# 导入需要识别的图像 将其转化为灰度图 然后用高斯模糊
pic = ('picture.png')
image = cv2.imread(pic)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (7, 7), 0)
    # 高斯模糊函数 输入的图像是 gray ksize(高斯核大小)为7*7矩阵 sigmaX=0
    # 高斯模糊的作用是增强图像在不同比例下的图像效果 高斯模糊对于图像来说是一个低通滤波器

# 进行边缘检测
# 在物体之间的边缘执行膨胀+腐蚀操作 使其缝隙闭合
edged = cv2.Canny(gray, 300, 400)  # 阈值范围太宽，容易得到错误的边缘；阈值范围太窄，容易无法识别边缘进而导致丢失检测对象的轮廓
kernel_edged = np.ones((5,5))
edged = cv2.dilate(edged, kernel_edged, iterations=1)
edged = cv2.erode(edged, kernel_edged, iterations=1)

cv2.imshow('edge', edged)
cv2.waitKey(0)
# 经过边缘检测操作的图像中查找轮廓
# cnts = cv2.findContours(edged.copy(), cv2.RETR_CCOMP,cv2.CHAIN_APPROX_NONE)
# cnts = imutils.grab_contours(cnts)
circles = cv2.HoughCircles(edged, cv2.HOUGH_GRADIENT, 1.2, 100)
for x0,y0,r0 in circles:
    cv2.circle(edged.copy(),(x0,y0),r0,(255,255,0),thickness=2)
# 从左到右对轮廓进行排列
# 'pixels per metric'变量初始化
# (cnts, boundingBoxes) = contours.sort_contours(cnts, method="left-to-righ")
    # contours.sort_contours()函数 接收两个参数 轮廓和排序方式 排序方式有 从左到右 从右到左 从上到下 从下到上
    # contours.sort_contours()函数 返回两个参数 轮廓和对应其边界框的列表  可以理解为边界框列表是key 轮廓是value
    # (cnts, list1) 相当于接收contours.sort_contours() 返回的两个参数 其中cnts对应接收已经排序之后的轮廓 boundingBoxes接收已经排序好的轮廓的列表
pixelsPerMetric = None

# 遍历这些轮廓
for c in enumerate(cnts):
# 如果轮廓太小 直接忽略掉 这个临界是100像素面积
    if cv2.contourArea(c) < 200:  # cv2.contourArea(c) 计算出轮廓c围成的面积
        continue

#如果轮廓足够大 计算边界框
    orig = image.copy()
    # orig = image 可将所有结果显示，同时将最后两行显示的代码缩进可以一次性显示最终结果

# 计算图中的选择边界框
    box = cv2.minAreaRect(c) # cv2.minAreaRect(Point) Point是点集合 类型是array 函数的功能是求出Point点集合下最小面积矩形
    box = cv2.boxPoints(box) # cv2.boxPoint()获取上述点集合中矩形的四个顶点的坐标 浮点型
    box = np.array(box, dtype="int") # 把获取的四个顶点变成array类型

# 对轮廓点进行排序 顺序为左上 右上 右下 左下
# 之后绘制旋转边界框的轮廓 绿色线绘制轮廓 红点绘制边界框矩形顶点
    box = perspective.order_points(box) # 存疑  通过imutils中perspective的透视方法 按照顺时针的方法进行box变量中四个点的排序
    cv2.drawContours(orig, [box.astype("int")], -1, (0, 255, 0), 2)  # [box.astype('int')] 存疑
    # box_image= contours.label_contour(orig, c, i, color=(0,0,255))
    # 在orig这个图像上进行绘制轮廓 轮廓是box.astype('int')这个list 绘制全部轮廓 (0,255,0)表示绿色 2表示填充线的宽度为2

# 遍历顶点并用红点绘制出来
    for (x, y) in box:
        cv2.circle(orig, (int(x), int(y)), 5, (0, 0, 255), -1)
        # 在orig这个图像上绘制 圆心坐标为 x,y 半径为5 颜色为(0,0,255) thickness=-1 代表将r=5的圆填满

# 打开有序的边界框 然后计算左上和右上坐标之间的中点坐标
# 再计算左下和右下坐标之间的中点坐标
    (tl, tr, br, bl) = box
    (tltrX, tltrY) = midpoint(tl, tr)
    (blbrX, blbrY) = midpoint(bl, br)

# 计算左上和左下坐标之间的中点坐标
# 再计算右上和右下坐标之间的中点坐标
    (tlblX, tlblY) = midpoint(tl, bl)
    (trbrX, trbrY) = midpoint(tr, br)

# 在图中画出上述的四个中点
    cv2.circle(orig, (int(tltrX), int(tltrY)), 5, (255, 0, 0), -1)
    cv2.circle(orig, (int(blbrX), int(blbrY)), 5, (255, 0, 0), -1)
    cv2.circle(orig, (int(tlblX), int(tlblY)), 5, (255, 0, 0), -1)
    cv2.circle(orig, (int(trbrX), int(trbrY)), 5, (255, 0, 0), -1)

# 在对应的中点之间绘制线
    cv2.line(orig, (int(tltrX), int(tltrY)), (int(blbrX), int(blbrY)), (255, 0, 255), 2)
    cv2.line(orig, (int(tlblX), int(tlblY)), (int(trbrX), int(trbrY)),(255, 0, 255), 2)
    # 在orig图像上绘制线 起点坐标和终点坐标分别为 (tltrX,tltrY)和(blbrX,blbrY) 颜色为(255,0,255) 线宽为2

# 计算中点之间的欧氏距离
    dA = dist.euclidean((tltrX, tltrY), (blbrX, blbrY))  # 高度距离
    dB = dist.euclidean((tlblX, tlblY), (trbrX, trbrY))  # 宽度距离

# 如果pixels per metric变量还没有初始化 将其计算为像素与提空的度量的比率
    if pixelsPerMetric is None:
        pixelsPerMetric = dB / 24.257

# 计算物体的尺寸
    dimA = dA / pixelsPerMetric
    dimB = dB / pixelsPerMetric

# 在图中画出物体的大小
    cv2.putText(orig, "{:.3f}mm".format(dimB),(int(tltrX - 15), int(tltrY - 10)), cv2.FONT_HERSHEY_SIMPLEX,0.65, (255, 255, 255), 2)
    cv2.putText(orig, "{:.3f}mm".format(dimA),(int(trbrX + 10), int(trbrY)), cv2.FONT_HERSHEY_SIMPLEX,0.65, (255, 255, 255), 2)
    # 在orig图像上写字 内容为'{:.lf}in'.format(dimA) 字体所占矩形的左上角的坐标 字体类型 字体大小 颜色 字体粗细

# 输出图像
    cv2.imshow("Image", orig)
    cv2.waitKey(0)
